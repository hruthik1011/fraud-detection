# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ao6A_0tkpdRKDiBUAMCL5KCGMi5KtO_r
"""

pip install MiniSom

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from minisom import MiniSom
from sklearn.preprocessing import MinMaxScaler, StandardScaler
from sklearn.model_selection import train_test_split
import tensorflow as tf

dataset = pd.read_csv("Credit_Card_Applications.csv")
X = dataset.iloc[:, :-1].values
Y = dataset.iloc[:, -1].values

sc = MinMaxScaler(feature_range=(0, 1))
X = sc.fit_transform(X)

som = MiniSom(x=10, y=10, input_len=15, sigma=1.0, learning_rate=0.5)
som.random_weights_init(X)
som.train_random(data=X, num_iteration=100)

plt.figure(figsize=(8, 8))
plt.bone()
plt.pcolor(som.distance_map().T)
plt.colorbar()
markers = ['o', 's']
colors = ['r', 'g']
for i, x in enumerate(X):
    w = som.winner(x)
    plt.plot(w[0] + 0.5,
             w[1] + 0.5,
             markers[Y[i]],
             markeredgecolor=colors[Y[i]],
             markerfacecolor='None',
             markersize=10,
             markeredgewidth=2)
plt.show()

mappings = som.win_map(X)
frauds = np.concatenate((mappings[(1, 5)], mappings[(7, 6)]), axis=0)
frauds = sc.inverse_transform(frauds)

print("Potential Fraud Customer IDs:")
for i in frauds[:, 0]:
    print(int(i))

customers = dataset.iloc[:, 1:].values

isfraud = np.zeros(len(dataset))
for i in range(len(dataset)):
    if dataset.iloc[i, 0] in frauds:
        isfraud[i] = 1

X_train, X_test, y_train, y_test = train_test_split(customers, isfraud, test_size=0.2, random_state=42)

sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

ann = tf.keras.models.Sequential()
ann.add(tf.keras.layers.Dense(units=2, activation='relu'))
ann.add(tf.keras.layers.Dense(units=1, activation='sigmoid'))
ann.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

ann.fit(X_train, y_train, batch_size=1, epochs=10)

test_loss, test_accuracy = ann.evaluate(X_test, y_test)
print(f'Test Loss: {test_loss}, Test Accuracy: {test_accuracy}')

y_pred_test = ann.predict(X_test)
y_pred_test = np.concatenate((y_test.reshape(-1, 1), y_pred_test), axis=1)
y_pred_test = y_pred_test[y_pred_test[:, 1].argsort()]

print("Predictions for testing set:")
print(y_pred_test)